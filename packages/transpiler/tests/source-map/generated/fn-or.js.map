{"version":3,"sources":["fn-or.dak","builtin-macros.dak"],"names":["simple_QMARK_","v","typeof","_EQ_","or","null","instanceof","Date","RegExp"],"mappings":"AAAA,MAAIA,eAASC,aCWNC,ODVQD,CCUXE,GAAc,QDVfC,ECIIF,ODHSD,CCGZE,GAAc,SDJfC,ECgBIF,ODdQD,CCcXE,GAAc,QDhBfC,ECkCIF,OD/BWD,CC+BdE,GAAc,WDlCfC,EAIUH,CCuCTE,GAAKE,ID3CND,ECaIF,ODRQD,CCQXE,GAAc,QDbfC,EAMSH,CCkCRK,YDlCUC,IANXH,EAOSH,CCiCRK,YDjCUE","sourcesContent":["(fn simple? [v]\n  (or (number? v)\n      (boolean? v)\n      (string? v)\n      (undefined? v)\n      (null? v)\n      (bigint? v)\n      (isa? v Date)\n      (isa? v RegExp)))\n","\n(macro array? [v]\n  '(Array.isArray ,v))\n\n(macro boolean? [v]\n  '(= (typeof ,v) :boolean))\n\n(macro object? [v]\n  '(= (typeof ,v) :object))\n\n(macro number? [v]\n  '(= (typeof ,v) :number))\n\n(macro bigint? [v]\n  '(= (typeof ,v) :bigint))\n\n(macro string? [v]\n  '(= (typeof ,v) :string))\n\n(macro zero? [v]\n  '(= ,v 0))\n\n(macro pos? [v]\n  '(> ,v 0))\n\n(macro neg? [v]\n  '(< ,v 0))\n\n(macro true? [v]\n  '(= ,v true))\n\n(macro false? [v]\n  '(= ,v false))\n\n(macro undefined? [v]\n  '(= (typeof ,v) :undefined))\n\n(macro defined? [v]\n  '(not= (typeof ,v) :undefined))\n\n(macro isa? [v k]\n  '(instanceof ,v ,k))\n\n(macro null? [v]\n  '(= ,v null))\n\n(macro inc [v]\n  '(+ ,v 1))\n\n(macro dec [v]\n  '(- ,v 1))\n\n(macro when [cond ...body]\n  '(if ,cond\n     (do ,...body)))\n\n(macro -> [v ...forms]\n  (.reduce forms\n           (fn [c f]\n             (if (= f.kind :list)\n               (do\n                 (.splice f 1 0 c)\n                 f)\n               '(,f ,c)))\n           v))\n\n(macro if-let [[form tst] then el]\n  '(let [temp# ,tst]\n     (if temp#\n       (let [,form temp#]\n         ,then)\n       ,el)))\n\n(macro when-let [[form tst] ...body]\n  '(let [temp# ,tst]\n     (if temp#\n       (let [,form temp#]\n         ,...body))))\n\n(macro doto [x ...forms]\n  '(let [gx# ,x]\n     ,(... (forms.map #(if (= $.kind :list)\n                         '(,(. $ 0) gx# ,(... ($.splice 1)))\n                         '(,$ gx#))))\n     gx#))\n"]}