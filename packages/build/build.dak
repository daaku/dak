(import [:node:path [join]]
        [:node:child_process [spawn]]
        [:chokidar [watch]]
        [:picomatch picomatch]
        [:p-debounce debounce]
        [:p-graph p-graph-w]
        [:mri mri]
        [:semver/functions/inc.js semver-inc])

(const p-graph p-graph-w.default)
(const ws-pad-target 19)
(const cmd-pad-target 11)
(const PASS "\x1b[32m\u2713\x1b[0m")
(const FAIL "\x1b[31m\x1b[1mx\x1b[0m")

(fn cwrite [w ...args]
  (when (and (in :cork w)
             (in :writableCorked w)
             (not w.writableCorked))
    (w.cork)
    (queueMicrotask #(w.uncork)))
  (for-of [v args]
    (w.write v)))

(fn since [start]
  (str (Math.round (- (performance.now) start)) "ms"))

(fn@ out [{:keys [exec]} ...args]
  (.trim (. @(exec ...args) :stdout)))

(fn@ all-workspaces [{:keys [readFile]}]
  (try
    (-> @(readFile "package.json" :utf8) JSON.parse (. :workspaces))
    (catch er
      (throw (Error (str "problem reading workspaces from package.json"
                         (if er.message (str ": " er.message) "")))))))

(fn@ workspace-package-json [{:keys [readFile]} ws]
  (-> (join ws "package.json") (readFile :utf8) await JSON.parse))

(fn ws-to-name [workspaces pkgs]
  (Object.fromEntries (workspaces.map #(do [$1 (. pkgs $2 :name)]))))

(fn name-to-index [pkgs]
  (Object.fromEntries (pkgs.map #(do [$1.name $2]))))

(fn run-log-cmd [writer prefix ws cmd sh start]
  (cwrite writer prefix (.padEnd (str " [" cmd "] ") cmd-pad-target)
          (ws.padEnd ws-pad-target " ")
          (.padStart (since start) 6 " ") " " sh "\n"))

(fn@ run-ws [env ws cmd]
  (let {:keys [exec stdout stderr]} env)
  (when-let [sh (-> @(workspace-package-json env ws) (?. :scripts cmd))]
    (let [start (performance.now)]
      (try
        (let [r @(exec sh {:cwd ws})]
          (run-log-cmd stdout PASS ws cmd sh start)
          (when (not= cmd :test)
            (when r.stdout (cwrite stdout r.stdout))
            (when r.stderr (cwrite stderr r.stderr))))
        (catch e
          (run-log-cmd stderr FAIL ws cmd sh start)
          (when e.stdout (cwrite stderr e.stdout))
          (when e.stderr (cwrite stderr e.stderr))
          (throw e))))))

(fn@ ^:export run [env cmd]
  (let [workspaces @(all-workspaces env)]
    (if (.some @(Promise.allSettled (workspaces.map #(run-ws env $ cmd)))
               #(= $.status :rejected))
      (throw (Error `error running "${cmd}" script in some packages`)))))

(fn array-remove [vs v]
  (let [index (vs.indexOf v)]
    (when (not= index -1)
      (vs.splice index 1)))
  vs)

(fn r-dep-graph [pkgs]
  (let [graph {}]
    (pkgs.map #(set (. graph $.name) []))
    (pkgs.map
      (fn [pkg]
        (when-let [deps pkg.dependencies]
          (-> deps Object.keys
              (.map #(when (in $ graph)
                      (.push (. graph $) pkg.name)))))))
    graph))

(fn@ ^:export r-dep [env]
  (let [{:keys [stdout]} env
        workspaces @(all-workspaces env)
        pkgs @(Promise.all (workspaces.map #(workspace-package-json env $)))]
    (for-of [[name r-deps] (-> pkgs r-dep-graph Object.entries)]
      (cwrite stdout name ": "
        (if (zero? r-deps.length) "<none>" (r-deps.join ", ")) "\n"))))

(fn@ p-graph-deps [env (test? false)]
  (let [workspaces @(all-workspaces env)
        pkgs @(Promise.all (workspaces.map #(workspace-package-json env $)))
        name-index (name-to-index pkgs)
        deps [[:prepare-packages/transpiler :prepare-packages/loader]]]
    (for-of [[name r-deps] (-> pkgs r-dep-graph Object.entries)]
      (let [pkg-name (. workspaces (. name-index name))]
        (when test?
          (for-of [r-dep r-deps]
            (let [dep-name (. workspaces (. name-index r-dep))]
              (deps.push [(str :prepare- pkg-name) (str :test- dep-name)])))
          (deps.push [:prepare-packages/loader (str :test- pkg-name)]))
        (when (and (not= pkg-name :packages/loader)
                   (not= pkg-name :packages/transpiler))
          (deps.push [:prepare-packages/loader (str :prepare- pkg-name)]))))
    [workspaces deps]))

(fn@ ^:export prepare [env]
  (let [[workspaces deps] @(p-graph-deps env)
        work (Map.)]
    (for-of [name workspaces]
      (work.set (str :prepare- name) {:run #(run-ws env name :prepare)}))
    @(.run (p-graph work deps))))

(fn@ ^:export test [env]
  (let [[workspaces deps] @(p-graph-deps env true)
        work (Map.)]
    (for-of [name workspaces]
      (work.set (str :prepare- name) {:run #(run-ws env name :prepare)})
      (work.set (str :test- name) {:run #(run-ws env name :test)}))
    @(.run (p-graph work deps))))

(fn@ pkg-needs-bump [env ws]
  (if-let [version-line
           @(out env "grep -n '\"version\"' package.json|cut -d : -f 1"
                 {:cwd ws})]
    (let [last-version-rev @(out env (str "git log -1 --quiet --format=%H -L "
                                           version-line "," version-line ":"
                                           (join ws "package.json")))]
      (not= "" @(out env (str "git log -1 --format=%H "
                                last-version-rev "..main " ws))))
    false))

(fn@ ^:export release [env ...argv]
  (let [{:keys [exec writeFile stdout]} env
        args (mri argv {:boolean [:dry-run] :alias {:dry-run :n}})
        release (?? (. args._ 0) :minor)
        workspaces @(all-workspaces env)
        [needs-bump pkgs]
        @(Promise.all
           [(Promise.all (workspaces.map #(pkg-needs-bump env $)))
            (Promise.all (workspaces.map #(workspace-package-json env $)))])
        ws-names (ws-to-name workspaces pkgs)
        name-index (name-to-index pkgs)
        graph (r-dep-graph pkgs)
        all-bump (needs-bump.reduce
                   (fn [all needs index]
                     (when needs
                       (all.add (. ws-names (. workspaces index)))
                       (.map (. graph (. pkgs index :name)) #(all.add $)))
                     all)
                   (Set.))
        write-indexes (Set.)
        writes []]
    (for-of [name all-bump]
      (let [index (. name-index name)
            pkg (. pkgs index)
            new-version (semver-inc pkg.version release)]
        (cwrite stdout name " " pkg.version " => " new-version "\n")
        (when (not args.n)
          (set pkg.version new-version)
          (write-indexes.add index)
          (for-of [r-dep-name (. graph name)]
            (let [r-dep-index (. name-index r-dep-name)
                  r-dep-pkg (. pkgs r-dep-index)]
              (set (. r-dep-pkg.dependencies name) (str "^" new-version))
              (write-indexes.add r-dep-index))))))
    (when (pos? write-indexes.size)
      (let [ws-to-publish []]
        (for-of [index write-indexes]
          (let [ws (. workspaces index)]
            (ws-to-publish.push ws)
            (writes.push (writeFile (join ws "package.json")
                                    [(JSON.stringify (. pkgs index) null 2)
                                    "\n"]))))
        @(Promise.all writes)
        @(exec "git commit -a -m 'publishing releases'")
        @(exec "git push")
        @(exec (str "npm publish -w " (ws-to-publish.join " -w ")))))))

(fn pkg-from-path [path]
  (path.slice 0 (path.indexOf "/" 9)))

(fn ignore-ex [p]
  (p.catch (fn [])))

(fn spawn-website-dev [env]
  (let [alive false
        start (fn []
                (doto
                  (spawn "dak" ["build.dak"]
                         {:cwd "packages/website"
                          :stdio ["ignore" "inherit" "inherit"]})
                  (.on :spawn #(set alive true))
                  (.on :error #(set alive false))
                  (.on :exit #(set alive false))))
        child (start)]
    (debounce
      (fn []
        (if alive (do
                    (child.on :exit #(set child (start)))
                    (child.kill "SIGKILL"))
          (set child (start))))
      50)))

(fn@ ^:export dev [env]
  (let [match-pkg (picomatch "packages/**/*.dak")
        match-website (picomatch ["packages/transpiler/dist/*"
                                  "packages/html/dist/*"
                                  "packages/website/**/*.dak"
                                  "packages/website/assets"
                                  "packages/website/readme.md"])
        website-dev (spawn-website-dev env)]
    (-> (watch "packages" {:ignoreInitial true})
        (.on :all
             (fn@ [event path]
               (when (match-pkg path)
                 (let [pkg (pkg-from-path path)]
                   @(ignore-ex (run-ws env pkg :prepare))
                   @(ignore-ex (run-ws env pkg :test))))
               (when (or (match-pkg path) (match-website path))
                 (website-dev)))))))

(const help-text
`usage: ./make.dak [command] [options]

test     prepare and test
cover    run unit tests with coverage
prepare  prepare packages
release  build and publish releases
  [-n|--dry-run]
r-dep    show internal reverse dependencies
dev      dev mode
run      run package scripts in parallel
  [command] script command
`)

(fn@ ^:export help [{:keys [stdout]}]
  (cwrite stdout help-text))

(const ^:export commands {:run run
                          :test test
                          :cover #(run $ :cover)
                          :prepare prepare
                          :r-dep r-dep
                          :release release
                          :dev dev
                          :help help})
