#!/usr/bin/env dak

(import [:node:path [dirname]]
        [:node:stream [Writable]]
        [:uvu [test]]
        [:uvu/assert [equal match unreachable]]
        [:./build.dak [run help r-dep]])

(macro deftest [name data str]
  '(test ,name
     (fn []
      (equal (html ,data) ,str))))

(const fake-pkgs
  [{:path "packages/dak"
    :name "@daklang/dak"
    :version "0.0.1"
    :dependencies {"@daklang/transpiler" "^0.0.1"
    :scripts {:prepare "prepare dak"}}}
   {:path "packages/website"
    :name "@daklang/website"
    :version "0.1.1"
    :dependencies {"@daklang/dak" "^0.1.1"}
    :scripts {:prepare "prepare website"}}
   {:path "not-in-subdir" :name "@daklang/transpiler" :version "0.1.0"}
   {:path "not-scoped" :name "daklang" :version "1.1.1"
    :dependencies {"@daklang/dak" "^0.0.1"
                   "@daklang/transpiler" "^1.1.1"}}])
(const fake-pkg-paths (fake-pkgs.map #(. $ :path)))

(fn fake-pkg-by [prop v]
  (fake-pkgs.find #(= (. $ prop) v)))

;(macro memo-fn@)

(fn@ fake-readFile [name]
  (when (name.endsWith "/package.json")
    (when-let [pkg (fake-pkg-by :path (dirname name))]
      (return (JSON.stringify pkg))))
  (case name
    "package.json" (JSON.stringify {:workspaces fake-pkg-paths})
    (throw (Error `mock not defined for: ${name}`))))

(class WriteCollector :extends Writable
  (let #actual [])
  (fn _write [chunk _encoding cb]
    (#actual.push chunk)
    (queueMicrotask cb))
  (fn@ content []
    (Promise. (fn [resolve]
      (this.on :finish #(resolve (#actual.join "")))
      (this.end)))))

(macro let-assert [bindings ...body]
  '(let [,(... (bindings.filter #(not= (% $2 3) 2)))]
     ,(... body)
     ,(... (bindings.filter #(= (% $2 3) 2)))))

(test :run-error
  (fn@ []
    (let-assert [stderr (WriteCollector.)
                 (match @(stderr.content) "fail whale")]
      (try
        @(run {:readFile fake-readFile
               :exec #(throw {:stderr "fail whale"})
               :stderr stderr}
              :prepare)
        (unreachable "expected to throw")
        (catch e
          (match e.message `error running "prepare"`))))))

(test :help
  (fn@ []
    (let-assert [stdout (WriteCollector.)
                 (match @(stdout.content) "build and publish")]
      @(help {:stdout stdout}))))

(test :r-dep
  (fn@ []
    (let-assert [stdout (WriteCollector.)
                 (equal @(stdout.content)
                   "@daklang/dak: @daklang/website, daklang
@daklang/website: <none>
@daklang/transpiler: @daklang/dak, daklang
daklang: <none>
")]
      @(r-dep {:readFile fake-readFile
               :stdout stdout}))))

(test.run)
