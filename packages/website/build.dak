(import [:esbuild :as esbuild]
        [:node:fs/promises [readFile writeFile mkdir]]
        [:node:path [relative dirname]]
        [:node:http [createServer]]
        [:finalhandler finalhandler]
        [:serve-static serveStatic]
        [:ws [WebSocketServer]]
        ["@daklang/transpiler" [transpileStr]]
        ["@daklang/html" [doc html unsafe]])

(const dakPlugin
  {:name :dak
   :setup
   (fn [build]
     (build.onLoad
       {:filter #/\.dak$/}
       (fn@ [{:keys [path]}]
         {:contents (. (transpileStr
                         @(readFile path :utf8)
                         {:filename (relative (process.cwd) path)
                          :sourcemap :inline})
                       :code)})))})

(fn@ esbuild-context [config]
  @(esbuild.context {:entryPoints ["assets/favicon.svg"
                                   "assets/index.css"
                                   "assets/index.dak"]
                     :define {"globalThis.IS_PRODUCTION"
                              (if (= config.env :production) "true" "false")}
                     :bundle true
                     :format :esm
                     :outdir "dist"
                     :metafile true
                     :assetNames "assets/[name]-[hash]"
                     :entryNames "assets/[name]-[hash]"
                     :loader {:.svg :file}
                     :sourcemap true
                     :plugins [dakPlugin]}))

(fn asset-original-name [p]
  (-> p
    (.replace #/^\/assets\// "")
    (.replace #/-.{8}(\.\w+)/ "$1")))

(fn assets-map [outputs]
  (let [assets {}]
    (-> outputs Object.keys
        (.filter #(not ($.endsWith ".map")))
        (.map #(if ($.startsWith "dist/") ($.substring 4) $))
        (.forEach #(set (. assets (asset-original-name $)) $)))
    assets))

(fn@ esbuild-prod [config]
  (let [ctx @(esbuild-context config)
        assets (assets-map (. @(ctx.rebuild) :metafile :outputs))]
    @(ctx.dispose)
    assets))

(const tour [:welcome :literals :variables])

(fn tour-title [s]
  (-> s
    (.replace "-" " ")
    (.replace #/\w\S*/g #(str (-> $ (.charAt 0) .toUpperCase)
                              (-> $ (.substring 1) .toLowerCase)))))

(const tour-nav
  (unsafe (html
    [:div#tour
      [:ul#tour (... (tour.map
        (fn [v]
          [:li [:a {:href (str "/tour/" v "/")} (tour-title v)]])))]])))

(fn play-ui [assets {:or {title "Dak Playground" code ""}}]
  (doc {:lang :en}
   [:head
    [:meta {:charset :utf-8}]
    [:title title]
    [:meta {:name :viewport :content "width=device-width,initial-scale=1"}]
    [:link {:rel :stylesheet :type "text/css" :href (. assets "index.css")}]
    [:link {:rel :icon :type "image/svg+xml" :href (. assets "favicon.svg")}]]
   [:body
    [:header
     [:h1 title]
     [:div
      [:button#tour-toggle "\u25B7 Show Tour Index"]
      [:input#auto-eval {:type :checkbox :checked true}]
      [:label {:for :auto-eval} "Eval"]
      [:select#fmt [:option {:value :pretty} "Pretty"]
                   [:option {:value :raw} "Raw"]
                   [:option {:value :minify} "Minify"]]]]
    tour-nav
    [:div.code
     [:textarea {:id :dak-code
                 :placeholder "Write some Dak..."
                 :autocorrect :off
                 :autocomplete :off
                 :autocapitalize :none
                 :spellcheck false
                 :autofocus true} code]
     [:textarea {:id :js-code
                 :placeholder "Output will show here."
                 :autocorrect :off
                 :autocomplete :off
                 :autocapitalize :none
                 :spellcheck false}]]
    [:div#output]
    [:script {:src "https://cdn.jsdelivr.net/npm/source-map@0.7.3/dist/source-map.js"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/terser@5.16.3/dist/bundle.min.js"}]
    [:script {:type :module :src (. assets "index.js")}]]))

(fn@ play-build [config assets name]
  (let [source-file (str "tour/" name ".dak")
        out-file (str "dist/tour/" name "/index.html")
        title (str (tour-title name) ": Dak Tour")
        code @(readFile source-file "utf-8")]
    @(mkdir (dirname out-file) {:recursive true})
    @(writeFile out-file (play-ui assets {:title title :code code}))))

(fn@ play-index [config assets]
  @(writeFile "dist/index.html" (play-ui assets {})))

(const timer-label "Build completed")
(fn@ main-prod [config]
  (console.time timer-label)
  (let [assets @(esbuild-prod config)]
    @(Promise.all
      [(play-index config assets)
       (... (tour.map #(play-build config assets $)))]))
  (console.timeEnd timer-label))

(fn set-headers [res path]
  (when (path.includes "/assets/")
    (res.setHeader :cache-control "public, immutable, max-age: 31557600")))

(fn@ main-dev [config]
  (main-prod config)
  (let [token (crypto.randomUUID)
        ss (serveStatic "dist" {:setHeaders set-headers})
        wss (WebSocketServer. {:noServer true})]
    (doto (createServer #(ss $1 $2 (finalhandler $1 $2)))
      (.on :listening
        #(console.log (str "Serving at http://localhost:" config.port "/")))
      (.on :upgrade
        (fn [req sock head]
          (if (= req.url "/ws")
            (wss.handleUpgrade req sock head #($.send token))
            (sock.destroy))))
      (.listen config.port))))

(fn@ main []
  (let [config {:env (or process.env.NODE_ENV "development")
                :port 8080}]
    ((if (= config.env :development) main-dev main-prod) config)))

@(main)

;; TODO
;; - tour navigation
