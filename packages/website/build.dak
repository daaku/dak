#!/usr/bin/env dak

(import [:esbuild :as esbuild]
        [:node:fs/promises [readFile writeFile mkdir rm]]
        [:node:path [relative dirname]]
        [:node:http [createServer]]
        [:finalhandler finalhandler]
        [:serve-static serveStatic]
        [:ws [WebSocketServer]]
        [:marked [marked]]
        ["@daklang/transpiler" [transpileStr]]
        ["@daklang/html" [doc html unsafe]])

(const prodURL "https://www.daklang.com/")

(const dakPlugin
  {:name :dak
   :setup
   (fn [build]
     (build.onLoad
       {:filter #/\.dak$/}
       (fn@ [{:keys [path]}]
         {:contents (. (transpileStr
                         @(readFile path :utf8)
                         {:filename (relative (process.cwd) path)
                          :sourcemap :inline})
                       :code)})))})

(fn markdown [config assets content]
  (-> content
      (marked.parse {:baseUrl "https://github.com/daaku/dak/blob/main/"})
      (.replace #/\.\/packages\/website\/assets\/(\w+\.\w+)/g #(. assets $2))
      (.replaceAll prodURL "/")))

(fn@ esbuild-context [config]
  @(esbuild.context {:entryPoints ["assets/logo.svg"
                                   "assets/logo.png"
                                   "assets/index.css"
                                   "assets/index.dak"]
                     :define {"globalThis.IS_PRODUCTION"
                              (if (= config.env :production) "true" "false")}
                     :bundle true
                     :format :esm
                     :outdir "dist"
                     :metafile true
                     :assetNames "assets/[name]-[hash]"
                     :entryNames "assets/[name]-[hash]"
                     :loader {:.svg :file :.png :file}
                     :sourcemap true
                     :plugins [dakPlugin]}))

(fn asset-original-name [p]
  (-> p
    (.replace #/^\/assets\// "")
    (.replace #/-.{8}(\.\w+)/ "$1")))

(fn assets-map [outputs]
  (let [assets {}]
    (-> outputs Object.keys
        (.filter #(not ($.endsWith ".map")))
        (.map #(if ($.startsWith "dist/") ($.substring 4) $))
        (.forEach #(set (. assets (asset-original-name $)) $)))
    assets))

(fn@ esbuild-prod [config]
  (let [ctx @(esbuild-context config)
        assets (assets-map (. @(ctx.rebuild) :metafile :outputs))]
    @(ctx.dispose)
    assets))

(const tour [:welcome :literals :variables :import :functions :lambda
             :classes :conditions :async :loops :destructuring :case
             :try-catch :operators :macros])

(fn tour-title [s]
  (-> s
    (.replace "-" " ")
    (.replace #/\w\S*/g #(str (-> $ (.charAt 0) .toUpperCase)
                              (-> $ (.substring 1) .toLowerCase)))))

(fn head-ui [assets {:keys [title] :or {description "The Dak language."}}]
  [:head
   [:meta {:charset :utf-8}]
   [:title title]
   [:meta {:name :viewport :content "width=device-width,initial-scale=1"}]
   [:meta {:property :og:image
           :content (str "https://www.daklang.com" (. assets "logo.png"))}]
   (when description
    [:meta {:name :description :content description}])
   [:link {:rel :stylesheet :type "text/css" :href (. assets "index.css")}]
   [:link {:rel :icon :type "image/svg+xml" :href (. assets "logo.svg")}]])

(const foot-ui
  (unsafe (html
    [:footer
      [:ul
       [:li [:a {:href "/"} "Dak Language"]]
       [:li [:a {:href "/tour/"} "Tour"]]
       [:li [:a {:href "/play/"} "Playground"]]
       [:li [:a {:href "https://github.com/daaku/dak"} "GitHub"]]
       [:li [:a {:href "mailto:n@daaku.org?subject=Dak" :target :_blank}
              "\u00a9 Naitik Shah"]]]])))

(fn logo-ui [assets]
  [:a {:href "/"} [:img {:width 24 :height 24 :src (. assets "logo.svg")
                         :alt "Home" :title "Home"}]])

(fn play-ui [assets {:or {title "Dak Playground" code "" description ""}}]
  (doc {:lang :en}
   (head-ui assets
     {:title title
      :description
       (or description
           (str title " to experiment with code in the Dak Language."))})
   [:body.tour
    [:header
     [:h1 (logo-ui assets) " " title]
     [:div
      [:a.tour-index {:href "/tour/"} "Tour Index"]
      [:input#auto-eval {:type :checkbox :checked true}]
      [:label {:for :auto-eval} "Eval"]
      [:select#fmt [:option {:value :pretty} "Pretty"]
                   [:option {:value :raw} "Raw"]
                   [:option {:value :minify} "Minify"]]]]
    [:div#code
     [:textarea {:id :dak-code
                 :placeholder "Write some Dak..."
                 :autocorrect :off
                 :autocomplete :off
                 :autocapitalize :none
                 :spellcheck false
                 :autofocus true} code]
     [:textarea {:id :js-code
                 :placeholder "Output will show here."
                 :autocorrect :off
                 :autocomplete :off
                 :autocapitalize :none
                 :spellcheck false}]]
    [:div#output]
    foot-ui
    [:script {:src "https://cdn.jsdelivr.net/npm/source-map@0.7.3/dist/source-map.js"}]
    [:script {:src "https://cdn.jsdelivr.net/npm/terser@5.16.3/dist/bundle.min.js"}]
    [:script {:type :module :src (. assets "index.js")}]]))

(fn@ play-build [config assets name]
  (let [source-file (str "tour/" name ".dak")
        out-file (str "dist/tour/" name "/index.html")
        title (str (tour-title name) ": Dak Tour")
        code @(readFile source-file "utf-8")]
    @(mkdir (dirname out-file) {:recursive true})
    @(writeFile out-file (play-ui assets {:title title :code code}))))

(fn@ error-html [config assets]
  @(writeFile "dist/error.html"
    (doc {:lang :en}
      (head-ui assets {:title "Error"})
      [:body
      [:div#error
        [:div
        [:h1 "\u26a0"]
        "There was a problem trying to get the page you requested."]]
      [:script {:type :module :src (. assets "index.js")}]])))

(fn exit [{:keys [sym title href action]} ...body]
  [:div.exit
   [:div.sym sym]
   [:div.title title]
   [:div.body ...body]
   [:a.go {:href href} action]])

(fn exits-ui []
  [:div.exits
   (exit {:sym "\u{1f310}"
         :title "Browser"
         :href "https://github.com/daaku/dak/blob/main/packages/rollup"
         :action "Build for Browsers"}
     "Make browser apps using a Vite/Rollup plugin that hooks into your existing bundler pipeline.")
   (exit {:sym "\u{1f3ae}"
         :title "Play"
         :href "/tour/functions/"
         :action "Playground"}
     "Take a tour and write as well as run code using an interactive playground right here in your browser.")
   (exit {:sym "\u2328\ufe0f"
         :title "CLI"
         :href "https://github.com/daaku/dak/blob/main/packages/loader"
         :action "Build CLIs"}
     "Write one off scripts or server side applications in Node and use anything from NPM.")])

(fn@ index-html [config assets]
  @(writeFile "dist/index.html"
    (doc {:lang :en}
      (head-ui assets
        {:title "Dak Language"
         :description "Dak is a Lisp like language that transpiles to JavaScript."})
      [:body.narrow
       [:div
         (-> (markdown config assets @(readFile "../../readme.md" :utf8))
             (.replace "<!--exits-->" (html (exits-ui)))
             unsafe)]
       foot-ui
       [:script {:type :module :src (. assets "index.js")}]])))

(fn@ tour-index-html [config assets]
  @(writeFile "dist/tour/index.html"
    (doc {:lang :en}
      (head-ui assets
        {:title "Dak Tour"
         :description "A series of modules to explore the Dak Language."})
      [:body.narrow
       [:h1 (logo-ui assets) " Dak Tour"]
       [:div#tour-index
        [:ul (... (tour.map
         (fn [v]
           [:li [:a {:href (str "/tour/" v "/")} (tour-title v)]])))]]]
       foot-ui
       [:script {:type :module :src (. assets "index.js")}])))

(fn@ play-index-html [config assets]
  @(writeFile "dist/play/index.html"
    (play-ui assets
      {:title "Dak Playground"
       :description "A Playground to experiment with the Dak Language."})))

(fn since [start]
  (str (Math.round (- (performance.now) start)) "ms"))

(fn@ main-prod [config]
  (const start (performance.now))
  @(Promise.all
    [(mkdir "dist/tour" {:recursive true})
     (mkdir "dist/play" {:recursive true})])
  (let [assets @(esbuild-prod config)]
    @(Promise.all
      [(index-html config assets)
       (error-html config assets)
       (tour-index-html config assets)
       (play-index-html config assets)
       (... (tour.map #(play-build config assets $)))]))
  (console.log "Build completed in" (since start)))

(fn set-headers [res path]
  (when (path.includes "/assets/")
    (res.setHeader :cache-control "public, immutable, max-age: 31557600")))

(fn@ main-dev [config]
  @(rm "dist" {:recursive true :force true})
  (main-prod config)
  (let [token (crypto.randomUUID)
        ss (serveStatic "dist" {:setHeaders set-headers})
        wss (WebSocketServer. {:noServer true})]
    (doto (createServer #(ss $1 $2 (finalhandler $1 $2)))
      (.on :listening
        #(console.log (str "Serving at http://localhost:" config.port "/")))
      (.on :upgrade
        (fn [req sock head]
          (if (= req.url "/ws")
            (wss.handleUpgrade req sock head #($.send token))
            (sock.destroy))))
      (.listen config.port))))

(fn@ main []
  (let [config {:env (or process.env.NODE_ENV "development")
                :port 8080}]
    ((if (= config.env :development) main-dev main-prod) config)))

@(main)
