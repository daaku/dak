// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`let-multi.dak 1`] = `"{let one="one";let two="two";};"`;

exports[`let-multi.dak 2`] = `
{
  "mappings": "CAAA,IAAMA,IAAI,MAAV,IACMC,IAAI",
  "names": [
    "one",
    "two",
  ],
  "sources": [
    "let-multi.dak",
  ],
  "sourcesContent": [
    
"(let [one :one
      two :two])
"
,
  ],
  "version": 3,
}
`;

exports[`string.dak 1`] = `"console.log("hello");"`;

exports[`string.dak 2`] = `
{
  "mappings": "AAAA,YAAa",
  "names": [],
  "sources": [
    "string.dak",
  ],
  "sourcesContent": [
    
"(console.log "hello")
"
,
  ],
  "version": 3,
}
`;

exports[`yield.dak 1`] = `"const gen=function*(){yield 1;return yield 2;};"`;

exports[`yield.dak 2`] = `
{
  "mappings": "AAAA,MAAKA,gBACH,MAAOC,SACP,MAAOC",
  "names": [
    "gen",
    "1",
    "2",
  ],
  "sources": [
    "yield.dak",
  ],
  "sourcesContent": [
    
"(fn* gen []
  (yield 1)
  (yield 2))
"
,
  ],
  "version": 3,
}
`;

exports[`while.dak 1`] = `"while(true){console.log("hello");};"`;

exports[`while.dak 2`] = `
{
  "mappings": "AAAA,MAAOA,MACL,YAAa",
  "names": [
    "true",
  ],
  "sources": [
    "while.dak",
  ],
  "sourcesContent": [
    
"(while true
  (console.log :hello))
"
,
  ],
  "version": 3,
}
`;

exports[`not.dak 1`] = `"console.log((!true));"`;

exports[`not.dak 2`] = `
{
  "mappings": "AAAA,aAAcA,CAAIC",
  "names": [
    "not",
    "true",
  ],
  "sources": [
    "not.dak",
  ],
  "sourcesContent": [
    
"(console.log (not true))
"
,
  ],
  "version": 3,
}
`;

exports[`rest.dak 1`] = `"const foo=(...args)=>{return console.log(...args);};"`;

exports[`rest.dak 2`] = `
{
  "mappings": "AAAA,MAAIA,KAAK,kBACP,YAAa,GAAKC",
  "names": [
    "foo",
    "args",
  ],
  "sources": [
    "rest.dak",
  ],
  "sourcesContent": [
    
"(fn foo [...args]
  (console.log (... args)))
"
,
  ],
  "version": 3,
}
`;

exports[`inc.dak 1`] = `"let a=1;(a++);"`;

exports[`inc.dak 2`] = `
{
  "mappings": "AAACA,IAAIC,EAAEC,GACHD,CAAHE",
  "names": [
    "let",
    "a",
    "1",
    "_PLUS__PLUS_",
  ],
  "sources": [
    "inc.dak",
  ],
  "sourcesContent": [
    
"(let a 1)
(++ a)
"
,
  ],
  "version": 3,
}
`;

exports[`if.dak 1`] = `"if(something){console.log("hello")};"`;

exports[`if.dak 2`] = `
{
  "mappings": "AAACA,GAAGC,WACF,YAAa",
  "names": [
    "if",
    "something",
  ],
  "sources": [
    "if.dak",
  ],
  "sourcesContent": [
    
"(if something
  (console.log :hello))
"
,
  ],
  "version": 3,
}
`;

exports[`try.dak 1`] = `"try{thing();}catch(err){console.error(err);}finally{console.log("done");};"`;

exports[`try.dak 2`] = `
{
  "mappings": "AAAA,IACE,SACA,MAAOA,KACL,cAAeA,MACjB,QACE,YAAa",
  "names": [
    "err",
  ],
  "sources": [
    "try.dak",
  ],
  "sourcesContent": [
    
"(try
  (thing)
  (catch err
    (console.error err))
  (finally
    (console.log :done)))
"
,
  ],
  "version": 3,
}
`;

exports[`when.dak 1`] = `"if(dak_DASH_code){console.log("hello");};"`;

exports[`when.dak 2`] = `
{
  "mappings": "AAqDIA,GCrDEC,eACJ,YAAa",
  "names": [
    "if",
    "dak_DASH_code",
  ],
  "sources": [
    "builtin-macros.dak",
    "when.dak",
  ],
  "sourcesContent": [
    
"
(macro array? [v]
  '(Array.isArray ,v))

(macro boolean? [v]
  '(= (typeof ,v) :boolean))

(macro object? [v]
  '(= (typeof ,v) :object))

(macro number? [v]
  '(= (typeof ,v) :number))

(macro bigint? [v]
  '(= (typeof ,v) :bigint))

(macro string? [v]
  '(= (typeof ,v) :string))

(macro zero? [v]
  '(= ,v 0))

(macro pos? [v]
  '(> ,v 0))

(macro neg? [v]
  '(< ,v 0))

(macro true? [v]
  '(= ,v true))

(macro false? [v]
  '(= ,v false))

(macro undefined? [v]
  '(= (typeof ,v) :undefined))

(macro defined? [v]
  '(not= (typeof ,v) :undefined))

(macro isa? [v k]
  '(instanceof ,v ,k))

(macro null? [v]
  '(= ,v null))

(macro inc [v]
  '(+ ,v 1))

(macro dec [v]
  '(- ,v 1))

(macro when [cond ...body]
  '(if ,cond
     (do ,...body)))

(macro -> [v ...forms]
  (.reduce forms
           (fn [c f]
             (if (= f.kind :list)
               (do
                 (.splice f 1 0 c)
                 f)
               '(,f ,c)))
           v))

(macro if-let [[form tst] then el]
  '(let [temp# ,tst]
     (if temp#
       (let [,form temp#]
         ,then)
       ,el)))

(macro when-let [[form tst] ...body]
  '(let [temp# ,tst]
     (if temp#
       (let [,form temp#]
         ,...body))))

(macro doto [x ...forms]
  '(let [gx# ,x]
     ,(... (forms.map #(if (= $.kind :list)
                         '(,(. $ 0) gx# ,(... ($.splice 1)))
                         '(,$ gx#))))
     gx#))
"
,
    
"(when dak-code
  (console.log :hello))
"
,
  ],
  "version": 3,
}
`;

exports[`object.dak 1`] = `"console.log({one:one,two:2,});"`;

exports[`object.dak 2`] = `
{
  "mappings": "AAAA,YAAa,CAAC,IAAKA,IAAI,IAAKC",
  "names": [
    "one",
    "2",
  ],
  "sources": [
    "object.dak",
  ],
  "sourcesContent": [
    
"(console.log {:one one :two 2})
"
,
  ],
  "version": 3,
}
`;

exports[`template-string.dak 1`] = `"const answer=42;;console.log(\`answer: ${answer}\`);"`;

exports[`template-string.dak 2`] = `
{
  "mappings": "AAACA,MAAMC,OAAOC,IACd,YAAa,CAAA,UADbD,MACa",
  "names": [
    "const",
    "answer",
    "42",
  ],
  "sources": [
    "template-string.dak",
  ],
  "sourcesContent": [
    
"(const answer 42)
(console.log \`answer: ${answer}\`)
"
,
  ],
  "version": 3,
}
`;

exports[`regex.dak 1`] = `"console.log(/hello/);"`;

exports[`regex.dak 2`] = `
{
  "mappings": "AAAA,YAAc",
  "names": [],
  "sources": [
    "regex.dak",
  ],
  "sourcesContent": [
    
"(console.log #/hello/)
"
,
  ],
  "version": 3,
}
`;

exports[`fn-or.dak 1`] = `"const simple_QMARK_=(v)=>{return (typeof v==="number"||typeof v==="boolean"||typeof v==="string"||typeof v==="undefined"||v===null||typeof v==="bigint"||v instanceof Date||v instanceof RegExp);};"`;

exports[`fn-or.dak 2`] = `
{
  "mappings": "AAAA,MAAIA,eAASC,aCWNC,ODVQD,CCUXE,GAAc,QDVfC,ECIIF,ODHSD,CCGZE,GAAc,SDJfC,ECgBIF,ODdQD,CCcXE,GAAc,QDhBfC,ECkCIF,OD/BWD,CC+BdE,GAAc,WDlCfC,EAIUH,CCuCTE,GAAKE,ID3CND,ECaIF,ODRQD,CCQXE,GAAc,QDbfC,EAMSH,CCkCRK,YDlCUC,IANXH,EAOSH,CCiCRK,YDjCUE",
  "names": [
    "simple_QMARK_",
    "v",
    "typeof",
    "_EQ_",
    "or",
    "null",
    "instanceof",
    "Date",
    "RegExp",
  ],
  "sources": [
    "fn-or.dak",
    "builtin-macros.dak",
  ],
  "sourcesContent": [
    
"(fn simple? [v]
  (or (number? v)
      (boolean? v)
      (string? v)
      (undefined? v)
      (null? v)
      (bigint? v)
      (isa? v Date)
      (isa? v RegExp)))
"
,
    
"
(macro array? [v]
  '(Array.isArray ,v))

(macro boolean? [v]
  '(= (typeof ,v) :boolean))

(macro object? [v]
  '(= (typeof ,v) :object))

(macro number? [v]
  '(= (typeof ,v) :number))

(macro bigint? [v]
  '(= (typeof ,v) :bigint))

(macro string? [v]
  '(= (typeof ,v) :string))

(macro zero? [v]
  '(= ,v 0))

(macro pos? [v]
  '(> ,v 0))

(macro neg? [v]
  '(< ,v 0))

(macro true? [v]
  '(= ,v true))

(macro false? [v]
  '(= ,v false))

(macro undefined? [v]
  '(= (typeof ,v) :undefined))

(macro defined? [v]
  '(not= (typeof ,v) :undefined))

(macro isa? [v k]
  '(instanceof ,v ,k))

(macro null? [v]
  '(= ,v null))

(macro inc [v]
  '(+ ,v 1))

(macro dec [v]
  '(- ,v 1))

(macro when [cond ...body]
  '(if ,cond
     (do ,...body)))

(macro -> [v ...forms]
  (.reduce forms
           (fn [c f]
             (if (= f.kind :list)
               (do
                 (.splice f 1 0 c)
                 f)
               '(,f ,c)))
           v))

(macro if-let [[form tst] then el]
  '(let [temp# ,tst]
     (if temp#
       (let [,form temp#]
         ,then)
       ,el)))

(macro when-let [[form tst] ...body]
  '(let [temp# ,tst]
     (if temp#
       (let [,form temp#]
         ,...body))))

(macro doto [x ...forms]
  '(let [gx# ,x]
     ,(... (forms.map #(if (= $.kind :list)
                         '(,(. $ 0) gx# ,(... ($.splice 1)))
                         '(,$ gx#))))
     gx#))
"
,
  ],
  "version": 3,
}
`;

exports[`not-eq.dak 1`] = `"const answer=42;;console.log(answer!==42);"`;

exports[`not-eq.dak 2`] = `
{
  "mappings": "AAACA,MAAMC,OAAOC,IACd,YAAmBD,MAALE,GAAYD",
  "names": [
    "const",
    "answer",
    "42",
    "not_EQ_",
  ],
  "sources": [
    "not-eq.dak",
  ],
  "sourcesContent": [
    
"(const answer 42)
(console.log (not= answer 42))
"
,
  ],
  "version": 3,
}
`;

exports[`template-string.dak 1`] = `"const answer=42;;console.log(\`answer: ${answer}\`);"`;

exports[`template-string.dak 2`] = `
{
  "mappings": "AAACA,MAAMC,OAAOC,IACd,YAAa,CAAA,UADbD,MACa",
  "names": [
    "const",
    "answer",
    "42",
  ],
  "sources": [
    "template-string.dak",
  ],
  "sourcesContent": [
    
"(const answer 42)
(console.log \`answer: ${answer}\`)
"
,
  ],
  "version": 3,
}
`;
