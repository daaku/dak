(import ["/assets/external/prettier-2.7.1.js" prettier]
        ["/assets/external/prettier-parser-babel-2.7.1.js" parserBabel]
        [:backo Backoff]
        [:../../src/transpiler.dak [transpileStr]])

; conditionally load since we share this script on non playground pages
(const dak-code (document.getElementById :dak-code))
(when dak-code
  (const auto-eval (document.getElementById :auto-eval))
  (const fmt (document.getElementById :fmt))
  (const js-code (document.getElementById :js-code))
  (const output (document.getElementById :output))
  (const overlay (document.querySelector ".code-edit .overlay"))

  (fn simple? [v]
    (or (number? v)
        (boolean? v)
        (string? v)
        (undefined? v)
        (null? v)
        (bigint? v)
        (isa? v Date)
        (isa? v RegExp)))

  (set globalThis.prn
    (fn [...rest]
      (console.log ...rest)
      (let [child (document.createElement :pre)]
        (for-of [[index thing] (rest.entries)]
          (when (pos? index)
            (child.appendChild (document.createTextNode " ")))
          (child.appendChild
            (document.createTextNode
              (if (simple? thing)
                (String thing)
                (JSON.stringify thing)))))
        (output.appendChild child))))

  (fn log-err [prefix err throw?]
    (let [child (document.createElement :pre)]
      (set child.innerText (str prefix ": " (?? err.message err)))
      (output.appendChild child))
    (when (number? err?.pos?.line)
      (for-of [[line txt] (-> dak-code.value (.split "\n") .entries)]
        (let [el (document.createElement (if (= line err.pos.line) :mark :pre))]
          (set el.innerText (|| txt " "))
          (overlay.append el))))
    (if throw?
      (throw err)
      (console.error err)))

  (fn sync-overlay []
    (set overlay.scrollTop (?? dak-code.scrollTop 0))
    (let [sl dak-code.scrollLeft]
      (set overlay.style.transform
           (if (pos? sl) `translateX(${-sl}px)` ""))))

  (let main-index 0)
  (fn@ refresh []
    (if globalThis.IS_PRODUCTION
      (console.clear))
    (output.replaceChildren)
    (overlay.replaceChildren)
    (try
      (let [js (. (transpileStr dak-code.value
                                {:source (str "main-" (++ main-index) ".dak")
                                 :sourcemap :inline})
                  :code)]
        (when auto-eval.checked
          ((fn@ []
            (try
              (-> (Blob. [js] {:type "text/javascript"})
                  URL.createObjectURL import await)
              (catch e
                (log-err :eval e true))))))
        (set js (js.replace #/\/\/# sourceMappingURL=.*/ ""))
        (set js-code.value
          (try
            (case fmt.value
              :pretty (prettier.format js {:parser :babel :plugins [parserBabel]})
              :minify (. @(Terser.minify js) :code)
              js)
            (catch e
              (log-err fmt.value e)
              js))))
      (catch e
        (log-err fmt.value e)))
    (sync-overlay))

  (set dak-code.onscroll sync-overlay)
  (set auto-eval.onchange refresh)
  (set dak-code.oninput refresh)
  (set fmt.onchange refresh)
  (refresh))

(when (not globalThis.IS_PRODUCTION)
  (let token null)
  (let backoff (Backoff. {:min 100 :max 5000 :factor 0.05}))
  (fn@ monitor []
    (doto (WebSocket. (str "ws://" location.host "/ws"))
      (.addEventListener :error #(setTimeout monitor (backoff.duration)))
      (.addEventListener :close #(setTimeout monitor (backoff.duration)))
      (.addEventListener :open #(backoff.reset))
      (.addEventListener :message
        (fn [event]
          (if (null? token) (set token event.data)
              (not= token event.data) (location.reload))))))
  (monitor))
