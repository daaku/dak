#!/usr/bin/env dak

(import [:node:fs/promises [readFile]]
        [:node:path [join]]
        [:node:util [promisify]]
        [:node:child_process {exec execCB}])

(const exec (promisify execCB))
(const PASS "\x1b[32mPASS\x1b[0m")
(const FAIL "\x1b[31m\x1b[1mFAIL\x1b[0m")

(fn since [start]
  (str (- (Date.now) start) "ms"))

(fn@ all-workspaces []
  (-> @(readFile "package.json" :utf8) JSON.parse (. :workspaces)))

(fn@ workspace-package-json [ws]
  (-> (join ws "package.json") (readFile :utf8) await JSON.parse))

(fn@ run [ws cmd ws-pad-target]
  (when-let [sh (-> @(workspace-package-json ws) (?. :scripts cmd))]
    (try
      (let [start (Date.now)
            {:keys [stdout stderr]} @(exec sh {:cwd ws})]
        (console.log PASS (ws.padEnd ws-pad-target " ")
          (.padStart (since start) 5 " ") sh)
        (when (not= cmd :test)
          (console.log stdout)
          (console.log stderr)))
      (catch e
        (console.log FAIL ws sh)
        (console.error e.stdout)
        (console.error e.stderr)
        false))))

(fn@ main []
  (set process.env.PATH
       (str process.env.PATH ":" (join (process.cwd) "./node_modules/.bin")))
  (let [cmd (. process.argv 2)
        workspaces @(all-workspaces)
        ws-pad-target (workspaces.reduce #(Math.max $1 $2.length) 0)]
    (if (.some @(Promise.allSettled (workspaces.map #(run $ cmd ws-pad-target)))
               #(false? $.value))
      (process.exit 1))))

@(main)
