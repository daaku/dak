#!/usr/bin/env dak

(import [:node:fs/promises [readFile]]
        [:node:path [join]]
        [:node:util [promisify]]
        [:node:child_process {exec execCB}])

(const exec (promisify execCB))
(const PASS "\x1b[32mPASS\x1b[0m")
(const FAIL "\x1b[31m\x1b[1mFAIL\x1b[0m")

(fn since [start]
  (str (- (Date.now) start) "ms"))

(fn@ all-workspaces []
  (-> @(readFile "package.json" :utf8) JSON.parse (. :workspaces)))

(fn@ workspace-package-json [ws]
  (-> (join ws "package.json") (readFile :utf8) await JSON.parse))

(fn@ run-ws [ws cmd ws-pad-target]
  (when-let [sh (-> @(workspace-package-json ws) (?. :scripts cmd))]
    (try
      (let [start (Date.now)
            {:keys [stdout stderr]} @(exec sh {:cwd ws})]
        (console.log PASS (ws.padEnd ws-pad-target " ")
          (.padStart (since start) 5 " ") sh)
        (when (not= cmd :test)
          (console.log stdout)
          (console.log stderr)))
      (catch e
        (console.log FAIL ws sh)
        (console.error e.stdout)
        (console.error e.stderr)
        false))))

(fn@ run [cmd]
  (let [workspaces @(all-workspaces)
        ws-pad-target (workspaces.reduce #(Math.max $1 $2.length) 0)]
    (if (.some @(Promise.allSettled (workspaces.map #(run-ws $ cmd ws-pad-target)))
               #(false? $.value))
      (process.exit 1))))

(fn r-dep-graph-fill [graph pkg kind]
  (when-let [deps (. pkg kind)]
    (-> deps Object.keys
        (.map #(when (in $ graph)
                 (.push (. graph $ kind) pkg.name))))))

(fn r-dep-graph [pkgs]
  (let [graph {}]
    (pkgs.map #(set (. graph $.name) {:devDependencies [] :dependencies []}))
    (pkgs.map (fn [pkg]
                (r-dep-graph-fill graph pkg :dependencies)
                (r-dep-graph-fill graph pkg :devDependencies)))
    (console.log graph)))

(fn@ r-graph []
  (let [workspaces @(all-workspaces)
        pkgs @(Promise.all (workspaces.map workspace-package-json))]
    (r-dep-graph pkgs)))

(const commands {:run run
                 :test #(run :test)
                 :cover #(run :cover)
                 :r-graph r-graph})

(fn@ main []
  (set process.env.PATH
       (str process.env.PATH ":" (join (process.cwd) "./node_modules/.bin")))
  (let [cmd-name (. process.argv 2)
        cmd (. commands cmd-name)]
    (when (not cmd)
      (console.error "unknown command:" cmd-name)
      (process.exit 1))
    (cmd (... (process.argv.slice 3)))))

@(main)
