#!/usr/bin/env bun

(import [:node:fs/promises [readFile writeFile mkdir rm cp]]
        [:node:path [dirname join basename normalize]]
        [:marked [marked]]
        [:marked-base-url [baseUrl]]
        [:marked-gfm-heading-id [gfmHeadingId]]
        [:./transpiler.dak [bunPlugin]]
        [:./html.dak [doc html unsafe]])

(const prodURL "https://www.daklang.com/")
(marked.use
  {:mangle false :headerIds false}
  (gfmHeadingId)
  (baseUrl "https://github.com/daaku/dak/blob/main/"))

(fn markdown [config assets content]
  (-> content
      marked.parse
      (.replace #/\.\/www\/assets\/(\w+\.\w+)/g #(. assets $2))
      (.replaceAll prodURL "/")))

(fn@ bun-build [config]
  @(Bun.build {:entrypoints ["www/assets/logo.svg"
                             "www/assets/logo.png"
                             "www/assets/index.css"
                             "www/assets/index.dak"]
               :define {"globalThis.IS_PRODUCTION"
                        (if (= config.env :production) "true" "false")}
               :format :esm
               :outdir "dist"
               :minify true
               :loader {:.svg :file :.png :file}
               :sourcemap :external
               :external ["/assets/external/*"]
               :naming {:entry "assets/[dir]/[name].[hash].[ext]"
                        :chunk "assets/[name].[hash].[ext]"
                        :asset "assets/[name].[hash].[ext]"}
               :plugins [(bunPlugin)]}))

(fn asset-original-name [p]
  (-> p
    (.replace #/^\/assets\// "")
    (.replace #/\.\w+(\.\w+)$/ "$1")))

(fn@ delete-js-shims [build-result]
  (let [shims (Set. (-> build-result.outputs
                      (.filter #(and (or (= $.loader :file) (= $.loader :css))
                                         (= $.kind :entry-point)))
                      (.map #(do [$.path $.sourcemap?.path]))
                      .flat
                      (.filter #(do $))))]
    @(Promise.all (-> [...shims] (.map #(rm $))))
    {...build-result :outputs (build-result.outputs?.filter #(not (shims.has $.path)))}))

(fn assets-map [{:keys [outputs]}]
  (let [assets {}]
    (-> outputs
        (.filter #(or (and (= $.kind :entry-point) (= $.loader :js))
                      (and (= $.kind :asset) (= $.loader :file))))
        (.map #(. $ :path))
        (.map #(-> "/dist/" $.indexOf (+ 5) $.substring))
        (.forEach #(set (. assets (asset-original-name $)) $)))
    assets))

(const tour [:welcome :literals :variables :import :functions :lambda
             :classes :conditions :async :loops :destructuring :case
             :try-catch :operators :macros])

(fn tour-title [s]
  (-> s
    (.replace "-" " ")
    (.replace #/\w\S*/g #(str (-> $ (.charAt 0) .toUpperCase)
                              (-> $ (.substring 1) .toLowerCase)))))

(fn head-ui [assets {:keys [title] :or {description "The Dak language."}}]
  [:head
   [:meta {:charset :utf-8}]
   [:title title]
   [:meta {:name :viewport :content "width=device-width,initial-scale=1"}]
   [:meta {:property :og:image
           :content (str "https://www.daklang.com" (. assets "logo.png"))}]
   (when description
    [:meta {:name :description :content description}])
   [:link {:rel :stylesheet :type "text/css" :href (. assets "index.css")}]
   [:link {:rel :icon :type "image/svg+xml" :href (. assets "logo.svg")}]])

(const foot-ui
  (unsafe (html
    [:footer
      [:ul
       [:li [:a {:href "/"} "Dak Language"]]
       [:li [:a {:href "/tour/"} "Tour"]]
       [:li [:a {:href "/play/"} "Playground"]]
       [:li [:a {:href "https://github.com/daaku/dak"} "GitHub"]]
       [:li [:a {:href "mailto:n@daaku.org?subject=Dak" :target :_blank}
              "\u00a9 Naitik Shah"]]]])))

(fn logo-ui [assets]
  [:a {:href "/"} [:img {:width 24 :height 24 :src (. assets "logo.svg")
                         :alt "Home" :title "Home"}]])

(fn play-ui [assets {:or {title "Dak Playground" code "" description ""}}]
  (doc {:lang :en}
   (head-ui assets
     {:title title
      :description
       (or description
           (str title " to experiment with code in the Dak Language."))})
   [:body.tour
    [:header
     [:h1 (logo-ui assets) " " title]
     [:div
      [:a.tour-index {:href "/tour/"} "Tour Index"]
      [:input#auto-eval {:type :checkbox :checked true}]
      [:label {:for :auto-eval} "Eval"]
      [:select#fmt [:option {:value :pretty} "Pretty"]
                   [:option {:value :raw} "Raw"]
                   [:option {:value :minify} "Minify"]]]]
    [:div#code
     [:div.code-edit
      [:textarea {:id :dak-code
                  :placeholder "Write some Dak..."
                  :autocorrect :off
                  :autocomplete :off
                  :autocapitalize :none
                  :spellcheck false
                  :autofocus true} code]
      [:div.overlay]]
     [:textarea {:id :js-code
                 :placeholder "Output will show here."
                 :autocorrect :off
                 :autocomplete :off
                 :autocapitalize :none
                 :spellcheck false}]]
    [:div#output]
    foot-ui
    [:script {:src "/assets/external/source-map-0.7.4.js"}]
    [:script {:src "/assets/external/terser-5.31.0.js"}]
    [:script {:type :module :src (. assets "index.js")}]]))

(fn@ play-build [config assets name]
  (let [source-file (str "www/tour/" name ".dak")
        out-file (str "dist/tour/" name "/index.html")
        title (str (tour-title name) ": Dak Tour")
        code @(readFile source-file "utf-8")]
    @(mkdir (dirname out-file) {:recursive true})
    @(writeFile out-file (play-ui assets {:title title :code code}))))

(fn@ error-html [config assets]
  @(writeFile "dist/error.html"
    (doc {:lang :en}
      (head-ui assets {:title "Error"})
      [:body
      [:div#error
        [:div
        [:h1 "\u26a0"]
        "There was a problem trying to get the page you requested."]]
      [:script {:type :module :src (. assets "index.js")}]])))

(fn exit [{:keys [sym title href action]} ...body]
  [:div.exit
   [:div.sym sym]
   [:div.title title]
   [:div.body ...body]
   [:a.go {:href href} action]])

(fn exits-ui []
  [:div.exits
   (exit {:sym "\u{1f310}"
         :title "Browser"
         :href "https://github.com/daaku/dak/blob/main/src/website.dak"
         :action "Build for Browsers"}
     "See how this static website is made.")
   (exit {:sym "\u{1f3ae}"
         :title "Play"
         :href "/tour/functions/"
         :action "Playground"}
     "Take a tour with an interactive playground.")
   (exit {:sym "\u2328\ufe0f"
         :title "CLI"
         :href "https://github.com/daaku/dak/blob/main/src/bootstrap.mjs"
         :action "Build CLIs"}
     "Preload " [:code "bootstrap.mjs"] " in Bun for Dak support.")])

(fn@ index-html [config assets]
  @(writeFile "dist/index.html"
    (doc {:lang :en}
      (head-ui assets
        {:title "Dak Language"
         :description "Dak is a Lisp like language that transpiles to JavaScript."})
      [:body.narrow
       [:div
         (-> (markdown config assets @(readFile "readme.md" :utf8))
             (.replace "<!--exits-->" (html (exits-ui)))
             unsafe)]
       foot-ui
       [:script {:type :module :src (. assets "index.js")}]])))

(fn@ tour-index-html [config assets]
  @(writeFile "dist/tour/index.html"
    (doc {:lang :en}
      (head-ui assets
        {:title "Dak Tour"
         :description "A series of modules to explore the Dak Language."})
      [:body.narrow
       [:h1 (logo-ui assets) " Dak Tour"]
       [:div#tour-index
        [:ul (... (tour.map
         (fn [v]
           [:li [:a {:href (str "/tour/" v "/")} (tour-title v)]])))]]]
       foot-ui
       [:script {:type :module :src (. assets "index.js")}])))

(fn@ play-index-html [config assets]
  @(writeFile "dist/play/index.html"
    (play-ui assets
      {:title "Dak Playground"
       :description "A Playground to experiment with the Dak Language."})))

(fn@ hex-sha256-file [path]
  (let [hasher (Bun.CryptoHasher. :sha256)]
    (for@ [chunk (-> path Bun.file .stream)]
      (hasher.update chunk))
    (-> hasher .digest Buffer.from (.toString :hex))))

(fn@ external-one [config file url expected-sha256]
  (let [cache-file (join "external" file)
        dist-file (join "dist/assets/external" file)]
    (try
      (when (not= @(hex-sha256-file cache-file) expected-sha256)
        (throw (Error. "invalid sha256")))
      @(cp cache-file dist-file)
      (catch e
        @(Bun.write cache-file @(fetch url))
        (when (not= @(hex-sha256-file cache-file) expected-sha256)
          (throw (Error. "invalid sha256 of fresh download")))
        @(cp cache-file dist-file)))))

(fn@ externals [config]
  (const sources
    [["source-map-0.7.4.js"
      "https://cdn.jsdelivr.net/npm/source-map@0.7.3/dist/source-map.js"
      "84a912cfa28183b00fc9e6e3e017d28cbad0697133e6964e94f15be8129c95f0"]
     ["terser-5.31.0.js"
      "https://cdn.jsdelivr.net/npm/terser@5.31.0/dist/bundle.min.js"
      "dff151237b4168b50c7e18dd6c09db7b86e1737182454b8136f5813348c306e6"]
     ["prettier-2.7.1.js"
      "https://cdn.jsdelivr.net/npm/prettier@2.7.1/esm/standalone.mjs"
      "9c3863ce84521f14356df245ead2dcc7f1778cd75935f2b59d8491e052ca2a47"]
     ["prettier-parser-babel-2.7.1.js"
      "https://cdn.jsdelivr.net/npm/prettier@2.7.1/esm/parser-babel.mjs"
      "23f3b3439f32f5759cb06b85f868d04eaeddc9d81cbfe071e897df95e4cb3c8b"]])
  @(Promise.all (sources.map
                  (fn [[file url expected-sha256]]
                    (external-one config file url expected-sha256)))))

(fn since [start]
  (str (Math.round (- (performance.now) start)) "ms"))

(fn@ main-prod [config]
  (const start (performance.now))
  @(rm "dist" {:recursive true :force true})
  @(Promise.all
    [(mkdir "external" {:recursive true})
     (mkdir "dist/assets/external" {:recursive true})
     (mkdir "dist/tour" {:recursive true})
     (mkdir "dist/play" {:recursive true})])
  (let [assets (-> config bun-build await delete-js-shims await assets-map)]
    @(Promise.all
      [(Bun.write "dist/assets-map.json" (JSON.stringify assets))
       (externals config)
       (index-html config assets)
       (error-html config assets)
       (tour-index-html config assets)
       (play-index-html config assets)
       (... (tour.map #(play-build config assets $)))]))
  (console.log "Build completed in" (since start)))

(fn headers-for [path]
  (when (path.includes "/assets/")
    {:cache-control "public, immutable, max-age: 31557600"}))

(fn@ main-dev [config]
  (main-prod config)
  (let [token (crypto.randomUUID)]
    (Bun.serve {:fetch
      (fn@ [req]
        (let [pathname (join "./dist" (-> req.url URL. (. :pathname) normalize))
              file (Bun.file pathname)]
          (if @(file.exists)
            (Response. file {:headers (headers-for pathname)})
            (Response. "not found" {:status 404}))))})))

(fn@ main []
  (let [config {:env (if (= process.env.DEV "1") :development :production)}]
    ((if (= config.env :development) main-dev main-prod) config)))

@(main)
